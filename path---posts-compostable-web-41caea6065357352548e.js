webpackJsonp([3],{"./node_modules/json-loader/index.js!./.cache/json/posts-compostable-web.json":function(e,t){e.exports={data:{markdownRemark:{html:"<h1>The Composeable Javascript Web</h1>\n<hr>\n<p><small><strong>The future is of the web will have faster JS in more places - It's things like ES6 and Typescript make excited to write JS again.</strong></small></p>\n<p><em>I'm ready to move on, I'm ready for a composeable web where shared libraries are not a chore to maintain. I'm ready for the end twitter bootstrap and jquery. I'm excited about the possibility and success of React native and Electron. I love to see progressive, lazy loaded, locally cached and incredibly fast apps with working browser history.</em></p>\n<h2>Where I'm @</h2>\n<p>I build fairly classic WSGI webapps with Python/Flask/<insert html framework here>  on Google App Engine + CDN for mostly everything - it's powerful, fast and simple to develop. AppEngine means if I can pay for scaling if I need to, the CDN reduced AppEngine static costs to near nil. These days I do most of my front end with Bootstrap and jQuery - because it's straightforward and speed of development (not application speed) is my biggest priority.</p>\n<p>It took a bit of bouncing around to land on a stack I've stuck with.</p>\n<p><code>LAMP -> ABAP -> + [ nginx/HAProxy] -> Perl -> AppEngine -> Python -> GoLang</code></p>\n<p>Conceptually I've always been kind of excited by Node.js  - but I don't find myself going to much in my professional life. I've found the Node.js community has some prolific anti-patterns and NPM was slow. Yarn takes away some of things that have struck me as kind of strange about NPM (determinastic installs, caching and linking mainly).</p>\n<h2>Insert React</h2>\n<p>I've used various JS frameworks over the years to handle ajax or make front end dev easier but I've never felt comfortable devoting the time/resources completely to an encompassing framework like Angular / Ember.  The target always seams to be moving faster then I'm willing to commit to.</p>\n<p>React is <a href=\"https://facebook.github.io/react/blog/2016/04/07/react-v15.html\">stable</a>, backed by real developer $$ (lets be real without a major backer these frameworks all end up dying) and solves a real problem anyone who has built more then one webbapp run into - reusable composeable components. That is stable reusable html sections with dynamic elements. Even without React I expect web components like JS is here to stay. Because of the adoption of React, the React / JSX community has lots of resources, variation on style and problem solving and that really makes it exciting to dive into React.</p>\n<h2>The Plan</h2>\n<ul>\n<li><strong>Build the same blog a couple times to wrap my head around React</strong></li>\n<li><strong>Decide if it is worth it to go with Typescript. (And get in bed with Microsoft)</strong></li>\n<li><strong>Is it time to migrate my frontend work to React?</strong></li>\n</ul>",timeToRead:2,frontmatter:{title:"The Composeable Javascript Web",tags:["test"],path:"/posts/Compostable-Web",date:"July 02, 2017",author:"Alex Shulman"}}},pathContext:{path:"/posts/Compostable-Web"}}}});
//# sourceMappingURL=path---posts-compostable-web-41caea6065357352548e.js.map